import { useEffect, useLayoutEffect, useMemo, useState, useCallback, useDebugValue } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

/**
 * Create media query objects
 * @param breakpoints the list of configured breakpoint names and their pixel values
 */
const createMediaQueries = (breakpoints) => {
    const sortedBreakpoints = Object.keys(breakpoints).sort((a, b) => breakpoints[b] - breakpoints[a]);
    return sortedBreakpoints.map((breakpoint, index) => {
        let query = '';
        const minWidth = breakpoints[breakpoint];
        const nextBreakpoint = sortedBreakpoints[index - 1];
        const maxWidth = nextBreakpoint ? breakpoints[nextBreakpoint] : null;
        if (minWidth >= 0) {
            query = `(min-width: ${minWidth}px)`;
        }
        if (maxWidth !== null) {
            if (query) {
                query += ' and ';
            }
            query += `(max-width: ${maxWidth - 1}px)`;
        }
        const mediaQuery = {
            breakpoint,
            maxWidth: maxWidth ? maxWidth - 1 : null,
            minWidth,
            query,
        };
        return mediaQuery;
    });
};

const useIsomorphicEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;

const EMPTY_BREAKPOINT = {
    breakpoint: undefined,
    minWidth: undefined,
    maxWidth: undefined,
};
/**
 * A React hook to use the current responsive breakpoint.
 * Will listen to changes using the window.matchMedia API.
 * @param {*} config the list of configured breakpoint names and their pixel values
 * @param {*} [defaultBreakpoint] the optional default breakpoint
 * @param {*} [hydrateInitial] whether to return the default breakpoint on first render. Set to `false` if the real breakpoint should be returned instead. Only applies to the browser, not server-side.
 *
 * @example
 * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }
 * ...
 * const result = useBreakpoint(breakpoints)
 * // { breakpoint: string; minWidth: number; maxWidth: number | null } | { breakpoint: undefined; minWidth: undefined; maxWidth: undefined }
 *
 * @example <caption>With default value</caption>
 * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }
 * ...
 * const result = useBreakpoint(breakpoints, 'mobile')
 * // breakpoint: { breakpoint: string; minWidth: number; maxWidth: number | null }
 *
 * @example <caption>With default value, but not hydrated. This means the breakpoint might be different on the initial render.</caption>
 * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }
 * ...
 * const result = useBreakpoint(breakpoints, 'mobile', false)
 * // breakpoint: { breakpoint: string; minWidth: number; maxWidth: number | null }
 */
const useBreakpoint = (config, defaultBreakpoint, hydrateInitial = true) => {
    /** Memoize list of calculated media queries from config */
    const mediaQueries = useMemo(() => createMediaQueries(config), [config]);
    /** Get initial breakpoint value */
    const [currentBreakpoint, setCurrentBreakpoint] = useState(() => {
        /** Loop through all media queries */
        for (let _a of mediaQueries) {
            const { query } = _a, breakpoint = __rest(_a, ["query"]);
            /**
             * If we're in the browser and there's no default value,
             * try to match actual breakpoint. If the default value
             * should not be hydrated, use the actual breakpoint.
             */
            if (typeof window !== 'undefined' &&
                !(defaultBreakpoint && hydrateInitial)) {
                const mediaQuery = window.matchMedia(query);
                if (mediaQuery.matches) {
                    return breakpoint;
                }
            }
            else if (breakpoint.breakpoint === defaultBreakpoint) {
                /** Otherwise, try to match default value */
                return breakpoint;
            }
        }
        return EMPTY_BREAKPOINT;
    });
    /** If there's a match, update the current breakpoint */
    const updateBreakpoint = useCallback(({ matches }, breakpoint) => {
        if (matches) {
            setCurrentBreakpoint(breakpoint);
        }
    }, []);
    /** On changes to mediaQueries, subscribe to changes using window.matchMedia */
    useIsomorphicEffect(() => {
        const unsubscribers = mediaQueries.map((_a) => {
            var { query } = _a, breakpoint = __rest(_a, ["query"]);
            const list = window.matchMedia(query);
            updateBreakpoint(list, breakpoint);
            const handleChange = (event) => {
                updateBreakpoint(event, breakpoint);
            };
            list.addListener(handleChange);
            /** Map the unsubscribers array to a list of unsubscriber methods */
            return () => list.removeListener(handleChange);
        });
        /** Return a function that when called, will call all unsubscribers */
        return () => unsubscribers.forEach((unsubscriber) => unsubscriber());
    }, [mediaQueries, updateBreakpoint]);
    /** Print a nice debug value for React Devtools */
    useDebugValue(currentBreakpoint, (c) => typeof c.breakpoint === 'string'
        ? `${c.breakpoint} (${c.minWidth} â‰¤ x${c.maxWidth ? ` < ${c.maxWidth + 1}` : ''})`
        : '');
    return currentBreakpoint;
};

export default useBreakpoint;

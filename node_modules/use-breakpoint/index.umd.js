(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.useBreakpoint = {}, global.React));
}(this, (function (exports, react) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    /**
     * Create media query objects
     * @param breakpoints the list of configured breakpoint names and their pixel values
     */
    var createMediaQueries = function (breakpoints) {
        var sortedBreakpoints = Object.keys(breakpoints).sort(function (a, b) { return breakpoints[b] - breakpoints[a]; });
        return sortedBreakpoints.map(function (breakpoint, index) {
            var query = '';
            var minWidth = breakpoints[breakpoint];
            var nextBreakpoint = sortedBreakpoints[index - 1];
            var maxWidth = nextBreakpoint ? breakpoints[nextBreakpoint] : null;
            if (minWidth >= 0) {
                query = "(min-width: " + minWidth + "px)";
            }
            if (maxWidth !== null) {
                if (query) {
                    query += ' and ';
                }
                query += "(max-width: " + (maxWidth - 1) + "px)";
            }
            var mediaQuery = {
                breakpoint: breakpoint,
                maxWidth: maxWidth ? maxWidth - 1 : null,
                minWidth: minWidth,
                query: query,
            };
            return mediaQuery;
        });
    };

    var useIsomorphicEffect = typeof window === 'undefined' ? react.useEffect : react.useLayoutEffect;

    var EMPTY_BREAKPOINT = {
        breakpoint: undefined,
        minWidth: undefined,
        maxWidth: undefined,
    };
    /**
     * A React hook to use the current responsive breakpoint.
     * Will listen to changes using the window.matchMedia API.
     * @param {*} config the list of configured breakpoint names and their pixel values
     * @param {*} [defaultBreakpoint] the optional default breakpoint
     * @param {*} [hydrateInitial] whether to return the default breakpoint on first render. Set to `false` if the real breakpoint should be returned instead. Only applies to the browser, not server-side.
     *
     * @example
     * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }
     * ...
     * const result = useBreakpoint(breakpoints)
     * // { breakpoint: string; minWidth: number; maxWidth: number | null } | { breakpoint: undefined; minWidth: undefined; maxWidth: undefined }
     *
     * @example <caption>With default value</caption>
     * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }
     * ...
     * const result = useBreakpoint(breakpoints, 'mobile')
     * // breakpoint: { breakpoint: string; minWidth: number; maxWidth: number | null }
     *
     * @example <caption>With default value, but not hydrated. This means the breakpoint might be different on the initial render.</caption>
     * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }
     * ...
     * const result = useBreakpoint(breakpoints, 'mobile', false)
     * // breakpoint: { breakpoint: string; minWidth: number; maxWidth: number | null }
     */
    var useBreakpoint = function (config, defaultBreakpoint, hydrateInitial) {
        if (hydrateInitial === void 0) { hydrateInitial = true; }
        /** Memoize list of calculated media queries from config */
        var mediaQueries = react.useMemo(function () { return createMediaQueries(config); }, [config]);
        /** Get initial breakpoint value */
        var _a = react.useState(function () {
            /** Loop through all media queries */
            for (var _i = 0, mediaQueries_1 = mediaQueries; _i < mediaQueries_1.length; _i++) {
                var _a = mediaQueries_1[_i];
                var query = _a.query, breakpoint = __rest(_a, ["query"]);
                /**
                 * If we're in the browser and there's no default value,
                 * try to match actual breakpoint. If the default value
                 * should not be hydrated, use the actual breakpoint.
                 */
                if (typeof window !== 'undefined' &&
                    !(defaultBreakpoint && hydrateInitial)) {
                    var mediaQuery = window.matchMedia(query);
                    if (mediaQuery.matches) {
                        return breakpoint;
                    }
                }
                else if (breakpoint.breakpoint === defaultBreakpoint) {
                    /** Otherwise, try to match default value */
                    return breakpoint;
                }
            }
            return EMPTY_BREAKPOINT;
        }), currentBreakpoint = _a[0], setCurrentBreakpoint = _a[1];
        /** If there's a match, update the current breakpoint */
        var updateBreakpoint = react.useCallback(function (_a, breakpoint) {
            var matches = _a.matches;
            if (matches) {
                setCurrentBreakpoint(breakpoint);
            }
        }, []);
        /** On changes to mediaQueries, subscribe to changes using window.matchMedia */
        useIsomorphicEffect(function () {
            var unsubscribers = mediaQueries.map(function (_a) {
                var query = _a.query, breakpoint = __rest(_a, ["query"]);
                var list = window.matchMedia(query);
                updateBreakpoint(list, breakpoint);
                var handleChange = function (event) {
                    updateBreakpoint(event, breakpoint);
                };
                list.addListener(handleChange);
                /** Map the unsubscribers array to a list of unsubscriber methods */
                return function () { return list.removeListener(handleChange); };
            });
            /** Return a function that when called, will call all unsubscribers */
            return function () { return unsubscribers.forEach(function (unsubscriber) { return unsubscriber(); }); };
        }, [mediaQueries, updateBreakpoint]);
        /** Print a nice debug value for React Devtools */
        react.useDebugValue(currentBreakpoint, function (c) {
            return typeof c.breakpoint === 'string'
                ? c.breakpoint + " (" + c.minWidth + " \u2264 x" + (c.maxWidth ? " < " + (c.maxWidth + 1) : '') + ")"
                : '';
        });
        return currentBreakpoint;
    };

    exports.default = useBreakpoint;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
